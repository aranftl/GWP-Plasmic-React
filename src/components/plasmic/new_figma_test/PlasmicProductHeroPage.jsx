// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x8ztdr6NwjtFcF6gdhDwfr
// Component: oDroFXNWeS
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ProductHero from "../../ProductHero"; // plasmic-import: yL-tGJImrp/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_new_figma_test.module.css"; // plasmic-import: x8ztdr6NwjtFcF6gdhDwfr/projectcss
import * as sty from "./PlasmicProductHeroPage.module.css"; // plasmic-import: oDroFXNWeS/css

export const PlasmicProductHeroPage__VariantProps = new Array();

export const PlasmicProductHeroPage__ArgProps = new Array();

function PlasmicProductHeroPage__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <React.Fragment>
      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <ProductHero
            data-plasmic-name={"productHero"}
            data-plasmic-override={overrides.productHero}
            className={classNames("__wab_instance", sty.productHero)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "productHero"],
  productHero: ["productHero"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProductHeroPage__ArgProps,
      internalVariantPropNames: PlasmicProductHeroPage__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicProductHeroPage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductHeroPage";
  } else {
    func.displayName = `PlasmicProductHeroPage.${nodeName}`;
  }
  return func;
}

export const PlasmicProductHeroPage = Object.assign(
  // Top-level PlasmicProductHeroPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    productHero: makeNodeComponent("productHero"),
    // Metadata about props expected for PlasmicProductHeroPage
    internalVariantProps: PlasmicProductHeroPage__VariantProps,
    internalArgProps: PlasmicProductHeroPage__ArgProps
  }
);

export default PlasmicProductHeroPage;
/* prettier-ignore-end */
