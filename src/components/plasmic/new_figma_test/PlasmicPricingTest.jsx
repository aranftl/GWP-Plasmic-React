// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x8ztdr6NwjtFcF6gdhDwfr
// Component: 2oDxXLtuj9QP
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import RwPriceCard from "../../RwPriceCard"; // plasmic-import: 5NdmoXTPsJ9/component
import MobileControlleft from "../../MobileControlleft"; // plasmic-import: 3pT1k967mK/component
import MobileControlright from "../../MobileControlright"; // plasmic-import: 5Zh2jaWV88/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: b0t-W0BM_nt_/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_new_figma_test.module.css"; // plasmic-import: x8ztdr6NwjtFcF6gdhDwfr/projectcss
import * as sty from "./PlasmicPricingTest.module.css"; // plasmic-import: 2oDxXLtuj9QP/css

export const PlasmicPricingTest__VariantProps = new Array();

export const PlasmicPricingTest__ArgProps = new Array();

function PlasmicPricingTest__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"box"}
          data-plasmic-override={overrides.box}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box)}
        >
          <RwPriceCard
            className={classNames("__wab_instance", sty.rwPriceCard___0IQdX)}
          />

          <RwPriceCard
            className={classNames("__wab_instance", sty.rwPriceCard__txEyy)}
            duration={"For the first 3 months then $40 /mo*"}
            slot={"Automate your work to stay on top of business."}
            wholePrice={"20"}
          >
            {"Essentials"}
          </RwPriceCard>

          <RwPriceCard
            className={classNames("__wab_instance", sty.rwPriceCard__ykJ02)}
            duration={"For the first 3 months then $70 /mo*"}
            popular={"popular"}
            slot={
              "Manage projects, billing, and contractors, all in one place."
            }
            wholePrice={"35 "}
          >
            {"Plus"}
          </RwPriceCard>

          <RwPriceCard
            className={classNames("__wab_instance", sty.rwPriceCard__kQnTa)}
            duration={"For the first 3 months then $150 /mo*"}
            slot={"Work smarter with the most comprehensive tools available."}
            wholePrice={"75 "}
          >
            {"Advanced"}
          </RwPriceCard>
        </p.Stack>

        {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"controller"}
            data-plasmic-override={overrides.controller}
            hasGap={true}
            className={classNames(defaultcss.all, sty.controller)}
          >
            {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
              <div
                data-plasmic-name={"left"}
                data-plasmic-override={overrides.left}
                className={classNames(defaultcss.all, sty.left)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobile") ? true : false
                ) ? (
                  <MobileControlleft
                    data-plasmic-name={"mobileControlleft"}
                    data-plasmic-override={overrides.mobileControlleft}
                    className={classNames(
                      "__wab_instance",
                      sty.mobileControlleft
                    )}
                  />
                ) : null}
              </div>
            ) : null}
            {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
              <div
                data-plasmic-name={"right2"}
                data-plasmic-override={overrides.right2}
                className={classNames(defaultcss.all, sty.right2)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobile") ? true : false
                ) ? (
                  <MobileControlright
                    data-plasmic-name={"right"}
                    data-plasmic-override={overrides.right}
                    className={classNames("__wab_instance", sty.right)}
                  />
                ) : null}
              </div>
            ) : null}
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "box",
    "controller",
    "left",
    "mobileControlleft",
    "right2",
    "right"
  ],

  box: ["box"],
  controller: ["controller", "left", "mobileControlleft", "right2", "right"],
  left: ["left", "mobileControlleft"],
  mobileControlleft: ["mobileControlleft"],
  right2: ["right2", "right"],
  right: ["right"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPricingTest__ArgProps,
      internalVariantPropNames: PlasmicPricingTest__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicPricingTest__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPricingTest";
  } else {
    func.displayName = `PlasmicPricingTest.${nodeName}`;
  }
  return func;
}

export const PlasmicPricingTest = Object.assign(
  // Top-level PlasmicPricingTest renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    box: makeNodeComponent("box"),
    controller: makeNodeComponent("controller"),
    left: makeNodeComponent("left"),
    mobileControlleft: makeNodeComponent("mobileControlleft"),
    right2: makeNodeComponent("right2"),
    right: makeNodeComponent("right"),
    // Metadata about props expected for PlasmicPricingTest
    internalVariantProps: PlasmicPricingTest__VariantProps,
    internalArgProps: PlasmicPricingTest__ArgProps
  }
);

export default PlasmicPricingTest;
/* prettier-ignore-end */
