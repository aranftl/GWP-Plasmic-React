// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x8ztdr6NwjtFcF6gdhDwfr
// Component: ZtlGG_EjHW
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_new_figma_test.module.css"; // plasmic-import: x8ztdr6NwjtFcF6gdhDwfr/projectcss
import * as sty from "./PlasmicRwButton.module.css"; // plasmic-import: ZtlGG_EjHW/css

export const PlasmicRwButton__VariantProps = new Array("medium", "large");

export const PlasmicRwButton__ArgProps = new Array();

function PlasmicRwButton__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames(
          defaultcss.button,
          defaultcss.__wab_text,
          sty.button,
          {
            [sty.button__large]: hasVariant(variants, "large", "large"),
            [sty.button__medium]: hasVariant(variants, "medium", "medium")
          }
        )}
      >
        {"Lorem ipsum"}
      </button>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "button"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRwButton__ArgProps,
      internalVariantPropNames: PlasmicRwButton__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicRwButton__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRwButton";
  } else {
    func.displayName = `PlasmicRwButton.${nodeName}`;
  }
  return func;
}

export const PlasmicRwButton = Object.assign(
  // Top-level PlasmicRwButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicRwButton
    internalVariantProps: PlasmicRwButton__VariantProps,
    internalArgProps: PlasmicRwButton__ArgProps
  }
);

export default PlasmicRwButton;
/* prettier-ignore-end */
