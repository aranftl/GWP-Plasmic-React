// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: x8ztdr6NwjtFcF6gdhDwfr
// Component: 3pT1k967mK
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_new_figma_test.module.css"; // plasmic-import: x8ztdr6NwjtFcF6gdhDwfr/projectcss
import * as sty from "./PlasmicMobileControlleft.module.css"; // plasmic-import: 3pT1k967mK/css
import Vector4Icon from "./icons/PlasmicIcon__Vector4"; // plasmic-import: L7BY_8YYtd/icon

export const PlasmicMobileControlleft__VariantProps = new Array();

export const PlasmicMobileControlleft__ArgProps = new Array();

function PlasmicMobileControlleft__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"mobileControlLeft"}
        data-plasmic-override={overrides.mobileControlLeft}
        className={classNames(defaultcss.all, sty.mobileControlLeft)}
      >
        <div
          data-plasmic-name={"rectangle718"}
          data-plasmic-override={overrides.rectangle718}
          className={classNames(defaultcss.all, sty.rectangle718)}
        />

        <Vector4Icon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(defaultcss.all, sty.svg)}
          role={"img"}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "mobileControlLeft", "rectangle718", "svg"],
  mobileControlLeft: ["mobileControlLeft", "rectangle718", "svg"],
  rectangle718: ["rectangle718"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMobileControlleft__ArgProps,
      internalVariantPropNames: PlasmicMobileControlleft__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicMobileControlleft__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMobileControlleft";
  } else {
    func.displayName = `PlasmicMobileControlleft.${nodeName}`;
  }
  return func;
}

export const PlasmicMobileControlleft = Object.assign(
  // Top-level PlasmicMobileControlleft renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    mobileControlLeft: makeNodeComponent("mobileControlLeft"),
    rectangle718: makeNodeComponent("rectangle718"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicMobileControlleft
    internalVariantProps: PlasmicMobileControlleft__VariantProps,
    internalArgProps: PlasmicMobileControlleft__ArgProps
  }
);

export default PlasmicMobileControlleft;
/* prettier-ignore-end */
